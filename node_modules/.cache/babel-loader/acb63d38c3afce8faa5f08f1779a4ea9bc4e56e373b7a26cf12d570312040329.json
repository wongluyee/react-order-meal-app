{"ast":null,"code":"var _jsxFileName = \"/Users/luyeewong/code/wongluyee/react-order-meal-app/src/store/CartProvider.js\",\n  _s = $RefreshSig$();\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\n// Outside of the component because it doesn't need anything from that component and it shouldn't be recreated all the time when the component is reevaluated.\nconst cartReducer = (state, action) => {\n  // the latest state snapshot\n  if (action.type === 'ADD') {\n    // Check if the item already existed in the cart or not\n    const existCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existCartItem = state.items[existCartItemIndex];\n    let updatedItem;\n    let updatedItems;\n    if (existCartItem) {\n      updatedItem = {\n        ...existCartItem,\n        amount: existCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existCartItemIndex] = updatedItem;\n    } else {\n      // concat function return a new array\n      updatedItems = state.items.concat(action.item);\n    }\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n  if (action.type === 'REMOVE') {\n    const existCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existCartItem = state.items[existCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existCartItem.price;\n    let updatedItems;\n    if (existCartItem.amount === 1) {\n      // Last item in the cart, remove the item\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      // Not the last item in the cart, decrease the volume by 1\n      const updatedItem = {\n        ...existCartItem,\n        amount: existCartItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existCartItemIndex] = updatedItem;\n    }\n    return {\n      items: updatedItems,\n      amount: updatedTotalAmount\n    };\n  }\n  return defaultCartState;\n};\n\n// To manage the cart context data and provide that context to all components that want access to it.\nconst CartProvider = props => {\n  _s();\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n  const addItemToCartHandler = item => {\n    // setup type so that it can be trigger by the cartReducer\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return (\n    /*#__PURE__*/\n    // Wrap any components to get access to this context with this cart provider component.\n    _jsxDEV(CartContext.Provider, {\n      value: cartContext,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useReducer","CartContext","jsxDEV","_jsxDEV","defaultCartState","items","totalAmount","cartReducer","state","action","type","existCartItemIndex","findIndex","item","id","existCartItem","updatedItem","updatedItems","amount","concat","updatedTotalAmount","price","filter","CartProvider","props","_s","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/luyeewong/code/wongluyee/react-order-meal-app/src/store/CartProvider.js"],"sourcesContent":["import { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\n// Outside of the component because it doesn't need anything from that component and it shouldn't be recreated all the time when the component is reevaluated.\nconst cartReducer = (state, action) => {\n  // the latest state snapshot\n  if (action.type === 'ADD') {\n    // Check if the item already existed in the cart or not\n    const existCartItemIndex = state.items.findIndex((item) =>\n      item.id === action.item.id\n    );\n\n    const existCartItem = state.items[existCartItemIndex];\n\n    let updatedItem;\n    let updatedItems;\n\n    if (existCartItem) {\n      updatedItem = {\n        ...existCartItem,\n        amount: existCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existCartItemIndex] = updatedItem;\n    } else {\n      // concat function return a new array\n      updatedItems = state.items.concat(action.item);\n    }\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE') {\n    const existCartItemIndex = state.items.findIndex((item) =>\n    item.id === action.id\n  );\n\n    const existCartItem = state.items[existCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existCartItem.price;\n\n    let updatedItems;\n\n    if (existCartItem.amount === 1) {\n      // Last item in the cart, remove the item\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      // Not the last item in the cart, decrease the volume by 1\n      const updatedItem = {...existCartItem, amount: existCartItem.amount - 1}\n      updatedItems = [...state.items];\n      updatedItems[existCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      amount: updatedTotalAmount\n    }\n  }\n\n  return defaultCartState;\n};\n\n// To manage the cart context data and provide that context to all components that want access to it.\nconst CartProvider = (props) => {\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = (item) => {\n    // setup type so that it can be trigger by the cartReducer\n    dispatchCartAction({type: 'ADD', item: item})\n  };\n\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({type: 'REMOVE', id: id})\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    // Wrap any components to get access to this context with this cart provider component.\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,WAAW,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE;AACf,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC;EACA,IAAIA,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE;IACzB;IACA,MAAMC,kBAAkB,GAAGH,KAAK,CAACH,KAAK,CAACO,SAAS,CAAEC,IAAI,IACpDA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACI,IAAI,CAACC,EAC1B,CAAC;IAED,MAAMC,aAAa,GAAGP,KAAK,CAACH,KAAK,CAACM,kBAAkB,CAAC;IAErD,IAAIK,WAAW;IACf,IAAIC,YAAY;IAEhB,IAAIF,aAAa,EAAE;MACjBC,WAAW,GAAG;QACZ,GAAGD,aAAa;QAChBG,MAAM,EAAEH,aAAa,CAACG,MAAM,GAAGT,MAAM,CAACI,IAAI,CAACK;MAC7C,CAAC;MACDD,YAAY,GAAG,CAAC,GAAGT,KAAK,CAACH,KAAK,CAAC;MAC/BY,YAAY,CAACN,kBAAkB,CAAC,GAAGK,WAAW;IAChD,CAAC,MAAM;MACL;MACAC,YAAY,GAAGT,KAAK,CAACH,KAAK,CAACc,MAAM,CAACV,MAAM,CAACI,IAAI,CAAC;IAChD;IACA,MAAMO,kBAAkB,GAAGZ,KAAK,CAACF,WAAW,GAAGG,MAAM,CAACI,IAAI,CAACQ,KAAK,GAAGZ,MAAM,CAACI,IAAI,CAACK,MAAM;IAErF,OAAO;MACLb,KAAK,EAAEY,YAAY;MACnBX,WAAW,EAAEc;IACf,CAAC;EACH;EAEA,IAAIX,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAMC,kBAAkB,GAAGH,KAAK,CAACH,KAAK,CAACO,SAAS,CAAEC,IAAI,IACtDA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACK,EACrB,CAAC;IAEC,MAAMC,aAAa,GAAGP,KAAK,CAACH,KAAK,CAACM,kBAAkB,CAAC;IACrD,MAAMS,kBAAkB,GAAGZ,KAAK,CAACF,WAAW,GAAGS,aAAa,CAACM,KAAK;IAElE,IAAIJ,YAAY;IAEhB,IAAIF,aAAa,CAACG,MAAM,KAAK,CAAC,EAAE;MAC9B;MACAD,YAAY,GAAGT,KAAK,CAACH,KAAK,CAACiB,MAAM,CAACT,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACK,EAAE,CAAC;IAClE,CAAC,MAAM;MACL;MACA,MAAME,WAAW,GAAG;QAAC,GAAGD,aAAa;QAAEG,MAAM,EAAEH,aAAa,CAACG,MAAM,GAAG;MAAC,CAAC;MACxED,YAAY,GAAG,CAAC,GAAGT,KAAK,CAACH,KAAK,CAAC;MAC/BY,YAAY,CAACN,kBAAkB,CAAC,GAAGK,WAAW;IAChD;IAEA,OAAO;MACLX,KAAK,EAAEY,YAAY;MACnBC,MAAM,EAAEE;IACV,CAAC;EACH;EAEA,OAAOhB,gBAAgB;AACzB,CAAC;;AAED;AACA,MAAMmB,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,kBAAkB,CAAC,GAAG3B,UAAU,CAACO,WAAW,EAAEH,gBAAgB,CAAC;EAEjF,MAAMwB,oBAAoB,GAAIf,IAAI,IAAK;IACrC;IACAc,kBAAkB,CAAC;MAACjB,IAAI,EAAE,KAAK;MAAEG,IAAI,EAAEA;IAAI,CAAC,CAAC;EAC/C,CAAC;EAED,MAAMgB,yBAAyB,GAAIf,EAAE,IAAK;IACxCa,kBAAkB,CAAC;MAACjB,IAAI,EAAE,QAAQ;MAAEI,EAAE,EAAEA;IAAE,CAAC,CAAC;EAC9C,CAAC;EAED,MAAMgB,WAAW,GAAG;IAClBzB,KAAK,EAAEqB,SAAS,CAACrB,KAAK;IACtBC,WAAW,EAAEoB,SAAS,CAACpB,WAAW;IAClCyB,OAAO,EAAEH,oBAAoB;IAC7BI,UAAU,EAAEH;EACd,CAAC;EAED;IAAA;IACE;IACA1B,OAAA,CAACF,WAAW,CAACgC,QAAQ;MAACC,KAAK,EAAEJ,WAAY;MAAAK,QAAA,EACtCX,KAAK,CAACW;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC;AAE3B,CAAC;AAACd,EAAA,CAzBIF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AA2BlB,eAAeA,YAAY;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}